# These are instructions to setup a Ubuntu virtual machine for the examples in
# this chapter. The first part of the instructions must be done manually. The
# last half can be done by executing this file as a script as instructed.

# Download VirtualBox and install

# Download Ubuntu desktop install and save on local disk [ubuntu-20.04-desktop-amd64.iso]
# Download VBoxGuestAdditions.iso
# On Mac already at /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso

# Setup new machine
# See the README.autovirtualbox script for directions for setting up base virtual machine

# sign in

# click through whats new

# select dots at bottom left and start up a terminal

# Reboot to get cut and paste and screen size fixed

# Add user to sudo list if needed
# su
# visudo
# add %vboxsf ALL=(ALL) ALL
# exit

# sudo apt-get install -y git

# Need script on guest to execute
# git clone --recursive https://github.com/essentialsofparallelcomputing/Chapter9.git
# Run the script Chapter9/README.virtualbox

DEBIAN_FRONTEND=noninteractive
sudo -qq apt-get update && \
sudo -qq apt-get install -y cmake git vim gcc g++ gfortran software-properties-common \
             wget gnupg-agent \
             mpich libmpich-dev \
             openmpi-bin openmpi-doc libopenmpi-dev && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# Installing latest GCC compiler (version 8) for best vectorization
sudo apt-get -qq update && \
sudo apt-get -qq install -y gcc-8 g++-8 gfortran-8 \
                            gcc-9 g++-9 gfortran-9 \
                            gcc-10 g++-10 gfortran-10 && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

sudo update-alternatives --install /usr/bin/gcc       gcc       /usr/bin/gcc-8 90 \
                         --slave   /usr/bin/g++       g++       /usr/bin/g++-8 \
                         --slave   /usr/bin/gfortran  gfortran  /usr/bin/gfortran-8 \
                         --slave   /usr/bin/gcov      gcov      /usr/bin/gcov-8

sudo update-alternatives --install /usr/bin/gcc       gcc       /usr/bin/gcc-10 70 \
                         --slave   /usr/bin/g++       g++       /usr/bin/g++-10 \
                         --slave   /usr/bin/gfortran  gfortran  /usr/bin/gfortran-10 \
                         --slave   /usr/bin/gcov      gcov      /usr/bin/gcov-10

# Installing Intel compiler since it gives the best vectorization across compiler vendors
#pushd /tmp
wget -q https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
sudo rm -f GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
#popd

echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
echo "deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/intel-graphics.list
sudo -qq apt-get update && \
sudo -qq apt-get install -y \
             intel-basekit-getting-started \
             intel-hpckit-getting-started \
             intel-oneapi-common-vars \
             intel-oneapi-common-licensing \
             intel-oneapi-dev-utilities \
             intel-oneapi-icc \
             intel-oneapi-ifort \
             intel-opencl && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# Generic OpenCL Loader
sudo apt-get update && \
sudo apt-get install -y clinfo ocl-icd-libopencl1 ocl-icd-* opencl-headers && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# Nvidia GPU software for computation
sudo wget -q https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
sudo RUN dpkg -i cuda-repo-ubuntu1804_10.2.89-1_amd64.deb

sudo apt-get -qq update && \
sudo apt-get -qq install -y cuda-toolkit-10-2 cuda-tools-10-2 cuda-compiler-10-2 \
         cuda-libraries-10-2 cuda-libraries-dev-10-2 libnvidia-compute-450 && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# ROCm software installation
sudo apt-get -qq update && \
sudo apt-get -qq install -y libnuma-dev && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

sudo wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add -
sudo echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main' >> /etc/apt/sources.list.d/r
sudo apt-get -qq update && \
sudo apt-get -qq install -y rocm-opencl-dev rocm-dkms && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# Vendor OpenCL
sudo apt-get -qq update && \
sudo apt-get -qq install -y mesa-opencl-icd && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# If Software updater prompts, install updated software --> wait ....

PATH=${PATH}:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64
PATH=/usr/local/cuda-10.2/bin:/usr/local/cuda-10.2/NsightCompute-2019.1${PATH:+:${PATH}}
LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

git clone --recursive https://github.com/essentialsofparallelcomputing/Chapter9.git

cd Chapter9; #make
